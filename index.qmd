---
format:
  revealjs:
    theme: night
    css: custom.css
    auto-stretch: false
    transition: fade
    slide-number: true
    incremental: true
    chalkboard: true
    title-slide-attributes:
      data-background-image: codabr.png
editor: visual
execute: 
  echo: true
  eval: false
  warning: false 
  message: false
---

# {background-image=img/codabr.png background-size="cover"}

# Meu primeiro pacote R {background-image=img/slide1.png background-size="cover"}

facilitando a rotina de an√°lises
  
<br><br>
Renata Hirota 

[hirota.dev](hirota.dev)

<!-- ## üëã Ol√°

Renata Hirota √© jornalista, estat√≠stica e mestranda no IME-USP. Atua como 
analista de dados no Jusbrasil, com foco em jurimetria para solu√ß√µes B2B. 
Tamb√©m colabora com a InfoAmazonia, analisando dados geoespaciais para 
reportagens sobre mudan√ßas clim√°ticas. J√° trabalhou no Volt Data Lab e na 
Associa√ß√£o Brasileira de Jurimetria (ABJ), al√©m de atuar como consultora em 
projetos jornal√≠sticos orientados por dados.
 -->

## Neste workshop, vamos ver...

- Estrutura de um pacote
- Uso dos pacotes `usethis` e `devtools`
- Documenta√ß√£o com `roxygen2`
- Instala√ß√£o local
- Publica√ß√£o no GitHub

## Pr√©-requisitos

- RStudio, VSCode ou qualquer outro editor
- Conta no GitHub (opcional para publica√ß√£o)
- Pacotes:
  - usethis
  - devtools
  - roxygen2
  - testhat

. . .

```{r}
install.packages(c("usethis", "devtools", "roxygen2", "testthat"))
```

# Criando o pacote {.bg-blue}

![](https://github.com/rstudio/hex-stickers/blob/main/PNG/usethis.png?raw=true){fig-align="center" width="20%"}



## Criando o pacote

. . . 

```{r}
usethis::create_package("meuPrimeiroPacote")
```

. . . 

Isso cria a estrutura b√°sica do pacote

. . . 

```
meuPrimeiroPacote/
‚îú‚îÄ‚îÄ R/
‚îú‚îÄ‚îÄ man/
‚îú‚îÄ‚îÄ DESCRIPTION
‚îú‚îÄ‚îÄ NAMESPACE
‚îú‚îÄ‚îÄ meuPrimeiroPacote.Rproj
‚îî‚îÄ‚îÄ .gitignore (se git estiver ativado)

```

. . . 

# O que cada pasta/arquivo faz? {.bg-orange}

## Pasta R/

Local onde ficam todas as fun√ß√µes do seu pacote.
Cada fun√ß√£o (ou grupo de fun√ß√µes relacionadas) deve ser salva em um arquivo `.R`.  
  

Exemplo: `soma_quadrado.R` conter√° a fun√ß√£o `soma_quadrado()`.  
  
  
> üí° Dica: mantenha fun√ß√µes organizadas por tema para facilitar manuten√ß√£o.

## Pasta man/

Cont√©m a documenta√ß√£o gerada automaticamente das fun√ß√µes, no formato `.Rd`.

Esses arquivos s√£o criados ao rodar `devtools::document()` a partir dos coment√°rios `#'` com `roxygen2`.

<mark>‚ùó Nunca edite esses arquivos manualmente.</mark>

## Arquivo DESCRIPTION

√â o cora√ß√£o do pacote, com as informa√ß√µes principais:

- Nome, vers√£o, autor, descri√ß√£o
- Depend√™ncias (pacotes que seu pacote usa)

. . .

Funciona como o ‚Äúcurr√≠culo‚Äù do seu pacote.

## Arquivo NAMESPACE

Define o que o pacote exporta (torna p√∫blico) e importa (usa de outros pacotes).

√â gerado automaticamente com `roxygen2` (com @export, @import etc.).

<mark>‚ùó Nunca edite manualmente.</mark>

## Arquivo .Rproj

Arquivo de projeto do RStudio.

Permite abrir o projeto com configura√ß√µes pr√≥prias.

Recomendado sempre usar `.Rproj` para facilitar o desenvolvimento.

## Arquivo .gitignore (opcional)

Se voc√™ usar `usethis::use_git()`, esse arquivo ser√° criado.

Ele indica quais arquivos/pastas o Git deve ignorar (ex: `.Rhistory`, `*.RData`, etc.).

## Outros arquivos que podem surgir

Durante o desenvolvimento, outras pastas e arquivos podem ser adicionados:

- `tests/`: testes automatizados (`testthat`)
- `README.md`: instru√ß√µes b√°sicas
- `.github/`: workflows de GitHub Actions (CI/CD)
- `vignettes/`: tutoriais/documenta√ß√µes longas
- `data/  `: dados inclu√≠dos no pacote

## Editando o DESCRIPTION

```{r}
usethis::use_description(fields = list(
  Title = "Meu Primeiro Pacote",
  Description = "Fun√ß√µes para automatizar an√°lises em R.",
  Author = "Seu Nome [aut, cre]",
  License = "MIT",
  Encoding = "UTF-8"
))
```

. . . 

O `usethis` tamb√©m tem v√°rias outras fun√ß√µes auxiliares que ajudam com esses detalhes:

- `usethis::use_mit_license()`
- `usethis::use_readme_md()`
- `usethis::use_logo()`


# Fun√ß√µes e documenta√ß√£o {.bg-blue}

![](https://github.com/rstudio/hex-stickers/blob/main/PNG/roxygen2.png?raw=true){width="20%"}

## Criando a primeira fun√ß√£o

Crie um arquivo dentro da pasta R: `R/soma_quadrado.R`
  
(Voc√™ tamb√©m pode fazer isso rodando a fun√ß√£o `use_r`)

```{r}
usethis::use_r("soma_quadrado")
```

Inclua o seguinte trecho de c√≥digo no arquivo:

```{r}
soma_quadrado <- function(x, y) {
  x^2 + y^2
}
```

## Documentando a fun√ß√£o com `roxygen2`

Antes de documentar sua fun√ß√£o, vamos entender o que cada bloco da sintaxe `roxygen2` significa.

```{r}
#| code-line-numbers: "1|3|5,6|7|8|9,10"

#' T√≠tulo curto da fun√ß√£o
#'
#' Descri√ß√£o mais completa da fun√ß√£o, com o que ela faz.
#'
#' @param x Descri√ß√£o do argumento x
#' @param y Descri√ß√£o do argumento y
#' @return O que a fun√ß√£o retorna
#' @export
#' @examples
#' minha_funcao(1, 2)
minha_funcao <- function(x, y) {
  x + y
}

```

## O que significa cada parte?

- `#'` ‚Üí Coment√°rio especial reconhecido pelo `roxygen2`
- **T√≠tulo** ‚Üí Primeira linha: breve e clara
- **Descri√ß√£o** ‚Üí Uma ou mais linhas com o que a fun√ß√£o faz

. . . 

### Tags mais comuns:
- `@param` ‚Üí Descreve os argumentos (um por linha)
- `@return` ‚Üí Explica o que a fun√ß√£o retorna
- `@examples` ‚Üí Mostra como usar a fun√ß√£o na pr√°tica
- `@export` ‚Üí Faz a fun√ß√£o ser acess√≠vel ao usu√°rio do pacote


## Fun√ß√£o com `roxygen2`

```{r}
#' Soma dos quadrados
#'
#' Esta fun√ß√£o calcula a soma dos quadrados de dois n√∫meros.
#'
#' @param x N√∫mero 1
#' @param y N√∫mero 2
#'
#' @return A soma dos quadrados
#' @export
soma_quadrado <- function(x, y) {
  x^2 + y^2
}
```

. . .

Gerando a documenta√ß√£o:
```{r}
devtools::document()
```

- Gera os arquivos .Rd na pasta man/
- Atualiza o NAMESPACE

# Testes unit√°rios {.bg-blue}

![](https://github.com/rstudio/hex-stickers/blob/main/PNG/testthat.png?raw=true){fig.align="center" width="20%"}

## Testando a fun√ß√£o


```{r}
devtools::load_all()
soma_quadrado(3, 4)  # Esperado: 25

```

## Adicionando testes

```{r}
usethis::use_testthat()
usethis::use_test("soma_quadrado")

```

Arquivo gerado: `tests/testthat/test-soma_quadrado.R`


```{r}
test_that("soma_quadrado funciona corretamente", {
  expect_equal(soma_quadrado(3, 4), 25)
})

```

## Instalando o pacote localmente

```{r}
devtools::install()

library(meuPrimeiroPacote)
soma_quadrado(2, 2)

```

## Publicando no GitHub


```{r}
usethis::use_git()
usethis::use_github()

```

- Autentique com sua conta
- Pronto para compartilhar!

## ‚úÖ Resumindo

- Use `roxygen2` para documentar tudo
- Use testes com `testthat`
- Mantenha fun√ß√µes organizadas
- Documente e atualize sempre

## D√∫vidas?

![](img/usethis.png){fig-align="center" width="80%"}

Arte: [@allison_horst](https://twitter.com/allison_horst)



## üßë‚Äçüíª M√£os na massa!

1. Crie seu pr√≥prio pacote
2. 1 ou 2 fun√ß√µes personalizadas
3. Documenta√ß√£o + teste
4. Instale localmente
5. Publique no GitHub (se quiser)


## üìö Recursos

- Livro [R Packages ‚Äì Hadley Wickham, Jenny Bryan](https://r-pkgs.org/)
- Livro [Zen do R](https://curso-r.github.io/zen-do-r/index.html)
- Curso-R 
  - Reposit√≥rio do curso de pacotes  
  [https://curso-r.github.io/main-pacotes/](https://curso-r.github.io/main-pacotes/)
  - Slides do curso de pacotes  
  [https://curso-r.github.io/main-pacotes/slides/](https://curso-r.github.io/main-pacotes/slides/)

